<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.4" />
  <meta name="TEMPLATEBASE" content="TIBCO Software Inc. Template 3.3.2" />
  <meta name="LASTUPDATED" content="10/22/02 12:29:41" />
  <title>Network Selection</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
var  WWHFrame = WWHGetWWHFrame("");

    var BookName = "TIBCO Rendezvous Administration";
    var ChapterTitle = "Chapter&#160;3	 Network Details";
   // -->
  </script>
 </head>

 <body  onLoad="WWHUpdate();WWHFrame.WWHContentFrame.WWHPageNavFrame.WWHTitleFrame.location.reload();">


<a name="wp1019316"> </a><h2 class="pNewHTMLPage">
Network Selection
</h2>
<hr />
<a name="wp1034583"> </a><p class="pBody">
Every network transport object communicates with other transport objects over a network. On computers with only one network interface, the Rendezvous daemon communicates on that network without further instruction from the program.
</p>
<a name="wp1034587"> </a><p class="pBody">
On computers with more than one network interface, the <code class="cCode">network</code> parameter instructs the Rendezvous daemon to use a particular network for all communications involving this transport. To communicate over more than one network, a program must create a separate transport object for each network. For further details, see <a  href="rv_adm16.htm#wp1019374">Limitation on Computers with Multiple Network Interfaces</a>.
</p>
<a name="wp1034591"> </a><p class="pBody">
The network parameter also specifies multicast addressing details (for a brief introduction, see <a  href="rv_adm16.htm#wp1034701">Multicast Addressing</a>).
</p>
<a name="wp1034595"> </a><p class="pBody">
To connect to a remote daemon, the <code class="cCode">network</code> parameter must refer to the network from the perspective of the remote computer that hosts the daemon process.
</p>
<a name="wp1034613"> </a><h3 class="pHeading2">
Constructing the Network Parameter
</h3>
<a name="wp1034614"> </a><p class="pBody">
The network parameter consists of up to three parts, separated by semicolons&#151;network, multicast groups, send address&#151;as in these examples:</p><div align="left">
<table border="0">
  <caption></caption>
  <tr align="left" valign="top">    <td><a name="wp1034617"> </a><div class="pCellBody">
<code class="cCode">&quot;lan0&quot;</code>
</div>
</td>
    <td><a name="wp1034619"> </a><div class="pCellBody">
network only
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1034621"> </a><div class="pCellBody">
<code class="cCode">&quot;lan0;224.1.1.1&quot;</code>
</div>
</td>
    <td><a name="wp1034623"> </a><div class="pCellBody">
one multicast group
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1034625"> </a><div class="pCellBody">
<code class="cCode">&quot;lan0;224.1.1.1,224.1.1.5;224.1.1.6&quot;</code>
</div>
</td>
    <td><a name="wp1034627"> </a><div class="pCellBody">
two multicast groups, send address
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1034629"> </a><div class="pCellBody">
<code class="cCode">&quot;lan0;;224.1.1.6&quot;</code>
</div>
</td>
    <td><a name="wp1034631"> </a><div class="pCellBody">
no multicast group, send address
</div>
</td>
</tr>
</table>
</div>
<p class="pBody">
</p>
<a name="wp1034632"> </a><h4 class="pHeading3">
Part One&#151;Network
</h4>
<a name="wp1034660"> </a><p class="pBody">
Part one identifies the network, which you can specify in several ways:</p><div align="left">
<table border="1">
  <caption><a name="wp1058907"> </a><div class="pTableTitle">
Table&#160;2   Specify Network (Sheet 1 of 2)
</div>
</caption>
  <tr align="left" valign="top">    <td><a name="wp1034635"> </a><div class="pCellBody">
Host name
</div>
</td>
    <td><a name="wp1034637"> </a><div class="pCellBody">
When a program specifies a host name, the transport creation function calls <code class="cCode">gethostbyname()</code>, which searches a network database to obtain the IP address.
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1034639"> </a><div class="pCellBody">
Host IP address
</div>
</td>
    <td><a name="wp1034641"> </a><div class="pCellBody">
When a program specifies an IP address, it must be a string representing a multi-part address. For example:
</div>
<div class="pPreformattedRelative"><pre class="pPreformattedRelative">
&#160;&#160;&#160;&quot;101.120.115.111&quot;<a name="wp1034642"> </a>
</pre></div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1034644"> </a><div class="pCellBody">
Network name (where supported)
</div>
</td>
    <td><a name="wp1034646"> </a><div class="pCellBody">
When an application specifies a network name, the transport creation function calls <code class="cCode">getnetbyname()</code>, which searches a network database such as Network Information Services (NIS) or a flat file (such as <code class="cCode">networks</code>) in the system directory.
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1034648"> </a><div class="pCellBody">
Network IP number
</div>
</td>
    <td><a name="wp1034650"> </a><div class="pCellBody">
If a program specifies a host IP address or a network IP number it must be in dotted-decimal notation. For example, <code class="cCode">101.55</code>.
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1034652"> </a><div class="pCellBody">
Interface name (where supported)
</div>
</td>
    <td><a name="wp1034654"> </a><div class="pCellBody">
When an application specifies an interface name, the transport creation function searches the interface table for the specified interface name. For example, <code class="cCode">lan0</code>.
</div>
<a name="wp1034655"> </a><div class="pCellBody">
The interface name must be one that is known to <code class="cCode">ifconfig</code> or <code class="cCode">netstat</code>.
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1034657"> </a><div class="pCellBody">
Default
</div>
</td>
    <td><a name="wp1265680"> </a><div class="pCellBody">
If a program does not specify a network, the transport creation function uses the default network interface:
</div>
<div class="pSmartList1"><ul>
<a name="wp1265681"> </a><div class="pSmartList1"><li >TRDP daemons use the network interface which corresponds to the host name of the system as determined by the C function <code class="cCode">gethostname()</code>.</li></div>

<a name="wp1265682"> </a><div class="pSmartList1"><li >PGM daemons use the default PGM multicast interface, <code class="cCode">224.0.1.78</code>.</li></div>

</ul></div>

</td>
</tr>
</table>
</div>
<p class="pBody">
</p>
<a name="wp1034662"> </a><p class="pBody">
The use of the UDP broadcast protocol has generally been superseded by the IP multicast protocol. To use broadcast protocols without multicast addressing, specify only part one of the network parameter, and omit the remaining parts.
</p>
<a name="wp1034690"> </a><h4 class="pHeading3">
Part Two&#151;Multicast Groups
</h4>
<a name="wp1034691"> </a><p class="pBody">
Part two is a list of zero or more multicast groups to join, specified as IP addresses, separated by commas. Each address in part two must denote a valid multicast address. Joining a multicast group enables listeners on the resulting transport to receive data sent to that multicast group.
</p>
<a name="wp1034695"> </a><p class="pBody">
For a brief introduction to multicasting, see <a  href="rv_adm16.htm#wp1034701">Multicast Addressing</a>.
</p>
<a name="wp1034696"> </a><h4 class="pHeading3">
Part Three&#151;Send Address
</h4>
<a name="wp1034697"> </a><p class="pBody">
Part three is a single send address. When a program sends broadcast data on the resulting transport, it is sent to this address. (Point-to-point data is not affected.) If present, this item must be an IP address&#151;not a host name or network name. The send address <em class="cEmphasis">need not</em> be among the list of multicast groups joined in part two.
</p>
<a name="wp1034698"> </a><p class="pBody">
If you join one or more multicast groups in part two, but do not specify a send address in part three, the send address defaults to the first multicast group listed in part two.
</p>
<a name="wp1034701"> </a><h3 class="pHeading2">
Multicast Addressing
</h3>
<a name="wp1034702"> </a><p class="pBody">
Multicast addressing is a focused broadcast capability implemented at the operating system level. In the same way that the Rendezvous daemon filters out unwanted messages based on service groups, multicast hardware and operating system features filter out unwanted messages based on multicast addresses.
</p>
<a name="wp1034706"> </a><p class="pBody">
When no broadcast messages are present on the service, multicast filtering (implemented in network interface hardware) can be more efficient than service group filtering (implemented in software). However, transports that specify multicast addressing still receive broadcast messages, so combining broadcast and multicast traffic on the same service can defeat the efficiency gain of multicast addressing.
</p>
<a name="wp1034710"> </a><p class="pBody">
Rendezvous software supports multicast addressing only when the operating system supports it. If the operating system does not support it, and you specify a multicast address in the network argument, then transport creation calls produce an error status (<a  href="javascript:WWHClickedPopup('e', 'rv_c_ref227.htm#wp1129098');" onMouseOver="WWHShowPopup('e', 'rv_c_ref227.htm#wp1129098', (document.all||document.getElementById||document.layers)?event:null);" onMouseOut="WWHHidePopup();"><code class="cCode">TIBRV_NETWORK_NOT_FOUND</code></a>).
</p>
<a name="wp1019374"> </a><h3 class="pHeading2">
Limitation on Computers with Multiple Network Interfaces
</h3>
<a name="wp1019378"> </a><p class="pBody">
On computers with more than one network interface, Rendezvous programs must not attempt to combine communications over different network interfaces using the same UDP or PGM service. To understand this limitation, consider these examples of <em class="cEmphasis">incorrect</em> usage in the context of multiple network interfaces.
</p>
<a name="wp1064866"> </a><h4 class="pHeading3">
Erroneous Examples
</h4>
<div class="pSmartList1"><ul>
<a name="wp1064800"> </a><div class="pSmartList1"><li >A program, <code class="cCode">mylistener</code>, creates a transport using service 7500 and network <code class="cCode">lan0</code>; it listens to broadcast subjects using that transport. Other program processes on both <code class="cCode">lan0</code> and <code class="cCode">lan1</code> send broadcast messages using service 7500.</li></div>

<a name="wp1064801"> </a><p class="pBodyRelative">
As a result, <code class="cCode">mylistener</code> might unexpectedly receive inbound messages from <code class="cCode">lan1</code>.
</p>
<a name="wp1064805"> </a><div class="pSmartList1"><li >An administrator configures the Rendezvous routing daemon on a computer with two network interfaces (<code class="cCode">lan0</code> and <code class="cCode">lan1</code>) using service 7500. Since the administrator does not specify a <code class="cCode">-network</code> parameter, the routing daemon uses the default network interface.</li></div>

<a name="wp1064806"> </a><p class="pBodyRelative">
As a result, the routing daemon forwards messages from its neighbor only to the default network interface; however, it might forward messages from both <code class="cCode">lan0</code> and <code class="cCode">lan1</code> to its neighbor.
</p>
<a name="wp1064807"> </a><div class="pSmartList1"><li >A program creates two network transports. Both use service 7500, but one uses network <code class="cCode">lan0</code>, while the other uses network <code class="cCode">lan1</code>.</li></div>

<a name="wp1064808"> </a><p class="pBodyRelative">
As a result, the call to create the second transport produces an error.
</p>
<a name="wp1064809"> </a><div class="pSmartList1"><li >Two programs on the same computer each create a transport. Both use service 7500, but one uses network <code class="cCode">lan0</code>, while the other uses network <code class="cCode">lan1</code>. Even though these transports are in different processes, both transports connect to the same Rendezvous daemon&#151;which is subject to the limitation.</li></div>

<a name="wp1064813"> </a><p class="pBodyRelative">
As a result, the program fails to create the second transport.
</p>
</ul></div>

<a name="wp1045651"> </a><p class="pBody">
We recommend <em class="cEmphasis">caution</em> when you deploy Rendezvous programs or Rendezvous routing daemons on any computer with multiple network interfaces.
</p>
<a name="wp1019406"> </a><h4 class="pHeading3">
Source of the Limitation
</h4>
<a name="wp1019407"> </a><p class="pBody">
The roots of this limitation are in the underlying IP broadcast protocols. Consider this asymmetry:
</p>
<div class="pSmartList1"><ul>
<a name="wp1019408"> </a><div class="pSmartList1"><li >When sending an <em class="cEmphasis">outbound</em> broadcast packet, IP software sends the packet on exactly one network.</li></div>

<a name="wp1019412"> </a><p class="pBodyRelative">
Rendezvous programs can specify this network with the transport creation function&#8217;s <code class="cCode">network</code> parameter.
</p>
<a name="wp1019416"> </a><div class="pSmartList1"><li >In contrast, IP software collects <em class="cEmphasis">inbound</em> broadcast packets from all network interfaces.</li></div>

<a name="wp1019417"> </a><p class="pBodyRelative">
Furthermore, when IP software presents an inbound packet to a client program (such as <code class="cCode">rvd</code>) it does not include any indication of the network on which that packet arrived.
</p>
</ul></div>

<a name="wp1019418"> </a><p class="pBody">
Because of this asymmetry, the actual behavior of IP broadcast protocols can be different than one might expect.
</p>
<a name="wp1019419"> </a><h4 class="pHeading3">
Avoiding the Limitation
</h4>
<a name="wp1019420"> </a><p class="pBody">
You can use two strategies to avoid problems associated with this limitation:
</p>
<div class="pSmartList1"><ul>
<a name="wp1019424"> </a><div class="pSmartList1"><li >Use a separate service for Rendezvous messages on each network.</li></div>

<a name="wp1064786"> </a><div class="pSmartList1"><li >Use multicast addressing to precisely define a range of reachable transports.</li></div>

</ul></div>

<a name="wp1064790"> </a><p class="pBody">
Using a separate service can rectify all four of the erroneous examples. Multicast addressing can rectify the first two erroneous examples, but not the latter two. In all four examples, a single Rendezvous daemon is sufficient.
</p>
<a name="wp1019436"> </a><p class="pBody">
For example, consider these two approaches to rectifying the first erroneous example:
</p>
<div class="pSmartList1"><ul>
<a name="wp1019440"> </a><div class="pSmartList1"><li >Separate Service</li></div>

<a name="wp1019444"> </a><p class="pBodyRelative">
A program, <code class="cCode">mylistener</code>, creates a transport using service 7500 and network <code class="cCode">lan0</code>; it listens to broadcast subjects using that transport. Other processes on <code class="cCode">lan0</code> send messages using service 7500, but all processes on <code class="cCode">lan1</code> send messages using service 7510. Separating by service prevents the transport from receiving interference from <code class="cCode">lan1</code>.
</p>
<a name="wp1019445"> </a><div class="pSmartList1"><li >Multicast Addressing</li></div>

<a name="wp1019449"> </a><p class="pBodyRelative">
A program, <code class="cCode">mylistener</code>, creates a transport using service 7500 and multicast network <code class="cCode">lan0;224.1.1.1</code>. This transport selectively receives only those inbound multicast messages that are sent on network <code class="cCode">lan0</code>, to multicast address <code class="cCode">224.1.1.1</code>, on service 7500. Multicast addressing (where available) filters out messages sent on other networks using any other multicast address.
</p>
<a name="wp1072346"> </a><p class="pBodyRelative">
However, multicast addressing does not filter out IP <em class="cEmphasis">broadcast</em> messages sent on the same UDP service. Once again, the roots of this limitation are in the underlying IP broadcast protocols.
</p>
</ul></div>


 <hr />


    <table align="right" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td align="right">
        <span style="font-size: 10px">
TIBCO Rendezvous Administration <br />
          
Software Release 7.1,  
October 2002<br />
        <em>Copyright &#169; TIBCO Software Inc. All rights reserved</em><br />
        <a href="http://www.tibco.com" target="_top">www.tibco.com</a><br />
        </span>
        </td>
      </tr>
    </table>


<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 </body>
</html>
