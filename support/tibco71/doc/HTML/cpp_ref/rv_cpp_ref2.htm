<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.4" />
  <meta name="TEMPLATEBASE" content="TIBCO Software Inc. Template 3.3.2" />
  <meta name="LASTUPDATED" content="10/22/02 12:56:24" />
  <title>Implementation</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
var  WWHFrame = WWHGetWWHFrame("");

    var BookName = "TIBCO Rendezvous C++ Reference";
    var ChapterTitle = "Chapter&#160;1	 Concepts";
   // -->
  </script>
 </head>

 <body  onLoad="WWHUpdate();WWHFrame.WWHContentFrame.WWHPageNavFrame.WWHTitleFrame.location.reload();">


<a name="wp1153758"> </a><h2 class="pNewHTMLPage">
Implementation
</h2>
<hr />
<a name="wp1127075"> </a><p class="pBody">
The Rendezvous C++ API consists of a thin wrapper around the C API.
</p>
<a name="wp1127096"> </a><p class="pBody">
It features a lightweight object model, in which C++ objects refer to C objects using a pointer or handle.
</p>
<a name="wp1148809"> </a><p class="pBody">
In general, C++ constructors declare typed variables and create hollow objects. In contrast, <code class="cCode">create</code> methods make hollow objects operational, by creating a corresponding C object, and storing its handle in the C++ object.
</p>
<a name="wp1148810"> </a><p class="pBody">
Similarly, C++ <code class="cCode">destroy</code> methods destroy the corresponding C object&#151;however, although they invalidate the C++ object, they do not free its storage. In contrast, C++ destructors first call the corresponding <code class="cCode">destroy</code> method, and then destroy the C++ object, reclaiming its storage.
</p>
<a name="wp1127108"> </a><h4 class="pHeading3">
Data Objects
</h4>
<a name="wp1148843"> </a><p class="pBody">
Data objects (messages, message fields, and datetime objects) present exceptions to these rules. C++ data objects have constructors and destructors, but not <code class="cCode">create</code> and <code class="cCode">destroy</code> methods.
</p>
<a name="wp1153720"> </a><p class="pBody">
Message constructors declare typed variables, but do not allocate storage; the first operation on a message variable creates a C++ object.
</p>
<a name="wp1153731"> </a><p class="pBody">
Datetime and field objects are identical to the corresponding C structs. Their constructors declare typed variables and allocate struct storage.
</p>


 <hr />


    <table align="right" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td align="right">
        <span style="font-size: 10px">
TIBCO Rendezvous C++ Reference <br />
          
Software Release 7.1,  
October 2002<br />
        <em>Copyright &#169; TIBCO Software Inc. All rights reserved</em><br />
        <a href="http://www.tibco.com" target="_top">www.tibco.com</a><br />
        </span>
        </td>
      </tr>
    </table>


<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 </body>
</html>
