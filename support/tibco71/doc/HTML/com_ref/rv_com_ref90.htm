<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
 <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1" />
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <meta name="GENERATOR" content="Quadralay WebWorks Publisher Professional Edition 7.0.4" />
  <meta name="TEMPLATEBASE" content="TIBCO Software Inc. Template 3.3.2" />
  <meta name="LASTUPDATED" content="10/22/02 13:09:01" />
  <title>TibrvTimer</title>
  <link rel="StyleSheet" href="document.css" type="text/css" />
  <link rel="StyleSheet" href="catalog.css" type="text/css" />
<script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/context.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/towwhdir.js"></script>
  <script type="text/javascript" language="JavaScript1.2" src="wwhdata/common/wwhpagef.js"></script>

  <script type="text/javascript" language="JavaScript1.2">
   <!--
    // Set reference to top level help frame
    //
var  WWHFrame = WWHGetWWHFrame("");

    var BookName = "TIBCO Rendezvous COM Reference";
    var ChapterTitle = "Chapter&#160;5	 Events and Queues";
   // -->
  </script>
 </head>

 <body  onLoad="WWHUpdate();WWHFrame.WWHContentFrame.WWHPageNavFrame.WWHTitleFrame.location.reload();">


<a name="wp1127015"> </a><h2 class="pNewHTMLPage">
TibrvTimer
</h2>
<hr />
<a name="wp1034765"> </a><p class="pSyntaxType">
Class
</p>
<a name="wp1034777"> </a><h4 class="pHeading3">
Purpose
</h4>
<a name="wp1034778"> </a><p class="pBody">
Timer event.
</p>
<a name="wp1032265"> </a><h4 class="pHeading3">
Remarks
</h4>
<a name="wp1114505"> </a><p class="pBody">
All timers are repeating timers. To simulate a once-only timer, code the callback method to destroy the timer. To stop the timer, destroy or delete it.
</p>
<a name="wp1081853"> </a><p class="pBody">
Destroying the queue of a timer automatically destroys the timer as well. However, the program must also delete the timer object to reclaim resources.</p><div align="left">
<table border="1">
  <caption></caption>
  <tr bgcolor="#006DA9" align="center" valign="top">    <th><a name="wp1156914"> </a><div class="pCellHeading">
Method
</div>
</th>
    <th><a name="wp1156916"> </a><div class="pCellHeading">
Description
</div>
</th>
    <th><a name="wp1156918"> </a><div class="pCellHeading">
Page
</div>
</th>
</tr>
  <tr align="left" valign="top">    <td  bgcolor="#CCE6FF"  colspan="3" rowspan="1"><a name="wp1156920"> </a><div class="pMinorHead">
Life Cycle
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1156929"> </a><div class="pCellBody">
<a  href="rv_com_ref91.htm#wp1034867"><code class="cCode">TibrvTimer.create</code></a>
</div>
</td>
    <td><a name="wp1156934"> </a><div class="pCellBody">
<a  href="rv_com_ref91.htm#wp1035027">Start a timer.</a>
</div>
</td>
    <td><a name="wp1156939"> </a><div class="pCellBody">
<a  href="rv_com_ref91.htm#wp1034867">118</a>
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1156944"> </a><div class="pCellBody">
<a  href="rv_com_ref92.htm#wp1122361"><code class="cCode">TibrvTimer.destroy</code></a>
</div>
</td>
    <td><a name="wp1156949"> </a><div class="pCellBody">
<a  href="rv_com_ref92.htm#wp1140405">Destroy a timer event.</a>
</div>
</td>
    <td><a name="wp1156954"> </a><div class="pCellBody">
<a  href="rv_com_ref92.htm#wp1122361">120</a>
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1156959"> </a><div class="pCellBody">
<a  href="rv_com_ref96.htm#wp1134092"><code class="cCode">TibrvTimer.isValid()</code></a>
</div>
</td>
    <td><a name="wp1156964"> </a><div class="pCellBody">
<a  href="rv_com_ref96.htm#wp1134098">Test the validity of a timer.</a>
</div>
</td>
    <td><a name="wp1156969"> </a><div class="pCellBody">
<a  href="rv_com_ref96.htm#wp1134092">124</a>
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td  bgcolor="#CCE6FF"  colspan="3" rowspan="1"><a name="wp1156971"> </a><div class="pMinorHead">
Callback Method
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1156980"> </a><div class="pCellBody">
<a  href="rv_com_ref97.htm#wp1127058"><code class="cCode">TibrvTimer_onTimer</code></a>
</div>
</td>
    <td><a name="wp1156985"> </a><div class="pCellBody">
<a  href="rv_com_ref97.htm#wp1127067">Process timer events.</a>
</div>
</td>
    <td><a name="wp1156990"> </a><div class="pCellBody">
<a  href="rv_com_ref97.htm#wp1127058">125</a>
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td  bgcolor="#CCE6FF"  colspan="3" rowspan="1"><a name="wp1156992"> </a><div class="pMinorHead">
Properties
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1157001"> </a><div class="pCellBody">
<a  href="rv_com_ref93.htm#wp1122398"><code class="cCode">TibrvTimer.getClosure()</code></a>
</div>
</td>
    <td><a name="wp1157005"> </a><div class="pCellBody">
<a  href="rv_com_ref93.htm#wp1122405">Extract the closure from a timer object.</a>
</div>
</td>
    <td><a name="wp1157011"> </a><div class="pCellBody">
<a  href="rv_com_ref93.htm#wp1122398">121</a>
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1157016"> </a><div class="pCellBody">
<a  href="rv_com_ref94.htm#wp1035119"><code class="cCode">TibrvTimer.getInterval()</code></a>
</div>
</td>
    <td><a name="wp1157020"> </a><div class="pCellBody">
<a  href="rv_com_ref94.htm#wp1035156">Extract the interval from a timer object.</a>
</div>
</td>
    <td><a name="wp1157026"> </a><div class="pCellBody">
<a  href="rv_com_ref94.htm#wp1035119">122</a>
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1157031"> </a><div class="pCellBody">
<a  href="rv_com_ref95.htm#wp1134252"><code class="cCode">TibrvTimer.getQueue()</code></a>
</div>
</td>
    <td><a name="wp1157035"> </a><div class="pCellBody">
<a  href="rv_com_ref95.htm#wp1134258">Extract the queue from a timer object.</a>
</div>
</td>
    <td><a name="wp1157041"> </a><div class="pCellBody">
<a  href="rv_com_ref95.htm#wp1134252">123</a>
</div>
</td>
</tr>
  <tr align="left" valign="top">    <td><a name="wp1157046"> </a><div class="pCellBody">
<a  href="rv_com_ref98.htm#wp1140058"><code class="cCode">TibrvTimer.resetInterval</code></a>
</div>
</td>
    <td><a name="wp1157050"> </a><div class="pCellBody">
<a  href="rv_com_ref98.htm#wp1035221">Reset the interval of a timer object.</a>
</div>
</td>
    <td><a name="wp1157056"> </a><div class="pCellBody">
<a  href="rv_com_ref98.htm#wp1140058">126</a>
</div>
</td>
</tr>
</table>
</div>
<p class="pBody">
</p>
<a name="wp1157084"> </a><h4 class="pHeading3">
Activation and Dispatch
</h4>
<a name="wp1191040"> </a><p class="pBody">
<a  href="rv_com_ref91.htm#wp1034867"><code class="cCode">TibrvTimer.create</code></a> creates the internal structure of a timer object, and <em class="cEmphasis">activates</em> the timer event&#151;that is, it requests notification from the operating system when the timer&#8217;s interval elapses. When the interval elapses, Rendezvous software places the event object on its event queue. Dispatch removes the event object from the queue, and runs the callback method to process the timer event. When the callback method begins, Rendezvous software automatically reactivates the event, using the same interval. On dispatch Rendezvous software also determines whether the next interval has already elapsed, and requeues the timer event if appropriate. (To stop the cycle, destroy the event object; see <a  href="rv_com_ref92.htm#wp1122361"><code class="cCode">TibrvTimer.destroy</code> </a>.)
</p>
<a name="wp1191053"> </a><p class="pBody">
Notice that time waiting in the event queue until dispatch can increase the effective interval of the timer. It is the programmer&#8217;s responsibility to ensure timely dispatch of events.
</p>
<a name="wp1191057"> </a><p class="pBody">
<a  href="rv_com_ref90.htm#wp1034832">Figure&#160;5</a> illustrates a sequence of timer intervals. The number of elapsed timer intervals directly determines the number of event callbacks.
</p>
<a name="wp1191058"> </a><p class="pBody">
At any moment the timer object appears on the event queue at most once&#151;not several times as multiple copies. Nonetheless, Rendezvous software arranges for the appropriate number of timer event callbacks based the number of intervals that have elapsed since the timer became active or reset its interval.
</p>
<a name="wp1191062"> </a><p class="pBody">
Destroying or invalidating the timer object <em class="cEmphasis">immediately</em> halts the sequence of timer events. The timer object ceases to queue new events, and an event already in the queue does not result in a callback. (However, callback methods that are already running in other threads continue to completion.)
</p>
<a name="wp1191063"> </a><p class="pBody">
Resetting the timer interval <em class="cEmphasis">immediately</em> interrupts the sequence of timer events and begins a new sequence, counting the new interval from that moment. The reset operation is equivalent to destroying the timer and creating a new object in its place.
</p>
<a name="wp1034832"> </a><div class="pFigureTitle">
Figure&#160;5   Timer Activation and Dispatch</div><div align="center"><img src="images/rv_com_refa.gif" height="290" width="528" border="0" hspace="0" vspace="0"/>
</div><div class="pFigureTitle">
</div>
<a name="wp1087769"> </a><h4 class="pHeading3">
Timer Granularity
</h4>
<a name="wp1087777"> </a><p class="pBody">
Express the timer interval (in seconds) as a 64-bit floating point number. This representation allows microsecond granularity for intervals for over 100 years. The actual granularity of intervals depends on VB, hardware and operating system constraints.
</p>
<a name="wp1112502"> </a><h4 class="pHeading3">
Zero as Interval
</h4>
<a name="wp1112542"> </a><p class="pBody">
Many programmers traditionally implement user events as timers with interval zero. Instead, we recommend implementing user events as messages on the intra-process transport. For more information, see <a  href="javascript:WWHClickedPopup('a', 'rv_concepts76.htm#wp1029257');" onMouseOver="WWHShowPopup('a', 'rv_concepts76.htm#wp1029257', (document.all||document.getElementById||document.layers)?event:null);" onMouseOut="WWHHidePopup();">Intra-Process Transport and User Events</a> in <em class="cEmphasis">TIBCO Rendezvous Concepts</em>.
</p>


 <hr />


    <table align="right" border="0" cellspacing="0" cellpadding="0">
      <tr>
        <td align="right">
        <span style="font-size: 10px">
TIBCO Rendezvous COM Reference <br />
          
Software Release 7.1,  
October 2002<br />
        <em>Copyright &#169; TIBCO Software Inc. All rights reserved</em><br />
        <a href="http://www.tibco.com" target="_top">www.tibco.com</a><br />
        </span>
        </td>
      </tr>
    </table>


<script type="text/javascript" language="JavaScript1.2">
   <!--
    document.write(WWHRelatedTopicsDivTag() + WWHPopupDivTag());
   // -->
  </script>

 </body>
</html>
