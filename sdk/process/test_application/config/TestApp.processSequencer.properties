#####################################################################################
## eManager: Process Sequencer / Application Watchdog Configuration property file 
#####################################################################################

## watchdog.java.class.path=  	(required) This property is required so that Process Sequnecer can
## 				find the proxy classes for the application processes

watchdog.java.class.path=/opt/CSCOemgmt/sdk/process/test_application/classes

##
## watchdog.servers=	This defines the servers you want watchdog to start space delimited
##

watchdog.servers=receiver sender

##
##  watchdog.groups=	This defines the groups of applications process.  You can do operational
##			commands for groups.  For example you can have a group of process for the
##			server portion of your system and a group defined for your client processes.
##			You can then start and stop the groups.  Remember the dependencies take
##			president over the group operations.

watchdog.groups=fullApplication server client

##
## watchdog.group.<group>= This defines the process withing the group
##

watchdog.group.fullApplication=sender receiver
watchdog.group.server=receiver
watchdog.group.client=sender


##  The following commands are defined for each server process starting with
##  "watchdog.server.<server>.<command>"
##
##  - cmd  		(required) If it starts with "java" it is considered a java server and launched
##          		accordingly. Otherwise specify the whole cmd (for scripts and exe's)
##			For Java process you can create a script and then call it or you can
##			replace all the funcionality by definging everything here.
##
##  - class  		(required) For a java server this the class that is an extension of 
##          		com.cisco.eManager.eManager.processSequencer.watchdog.ProcessExecutor, 
##          		that contains a heartbeat() method which throws an exception if it cannot
##          		contact the actual Server. It also can return a string (status) value that 
## 			can be displayed in eManager.  You can also implement your own method for 
## 			shuting down the process with stopServerHard() method.  Watchdog uses this
##			class as its proxy for the actual server.  There will also be some standard
##			proxy classes created for Tomcat servers and process that just return a null
##			and don't implment a heartbeat.
##
##  - dependecies  	(optional) the other servers that should be started before this server can be started.
##			This is not required and are space delimited.
##
##  - shutdown.cmd 	(optional) if this is specified then this script/command is called to 
##			shutdown the process.  You may also override this funcionality by 
##			implementing your own stopServerHard() method in the proxy class.
##
##  - app_args	 	(optional) the arguments to be passed to the class (as specified in the cmd
##          		property)
##
##  - java.class.path	(optional) For starting a java process (in cmd above) you can specify the class 
##			path that is need for running the java VM.
##			
##  - java.flags	(optional) This allows you specify flags to be passed to the Java VM
##			example:  watchdog.server.<server>.java.flags=-Dprocess.name=client -Dmy.property=test-property
##

## In the following example you see that we have two process that call a script and one process that is a java
## class that gets started.  From the dependecies you can see the receiver is dependent on the scheduler and the 
## sender that is dependent on the receiver.  So the watchdog will start schedular first then receiver and then sender.

watchdog.server.sender.cmd=/opt/CSCOemgmt/sdk/process/test_application/bin/run_Sender
watchdog.server.sender.class=WDNoHeartbeat
watchdog.server.sender.dependencies=receiver


watchdog.server.receiver.cmd=/opt/CSCOemgmt/sdk/process/test_application/bin/run_Receiver
watchdog.server.receiver.class=WDNoHeartbeat
watchdog.server.sender.dependencies=scheduler
